// $varEnv = App::getModel('interfaces');
// dump($varEnv);


// travailler sur une copie du fichier

// $fileEnv = new fileController();
// $file = $fileEnv->openFile('GTT_file_env');

// $interfaceMatch = new InterfaceController();

// $pattern = '/^FIPNIV=([0-9]{1,2})/';
// $res[] = $interfaceMatch->getValueFileEnv($file, $pattern);

// $pattern = '/^INTGTT_NOMGTT=([A-Z]+)/';
// $res[] = $interfaceMatch->getValueFileEnv($file, $pattern);

// $pattern = '/^CODE_INSA_BLANC=([A-Z]+)/';
// $res[] = $interfaceMatch->getValueFileEnv($file, $pattern);

// $pattern = '/^INTGTT_ABSAGTOK=([\w$\.\_\/]+)/';
// $res[] = $interfaceMatch->getValueFileEnv($file, $pattern);

// dump($res);









// $router->register('/', ['Controllers\interfaceController', 'index']);



// if (isset($_GET['controller']) and $_GET['controller'] !== '') {
//     $controller = App::getController(ucfirst($_GET['controller']) . 'Controller');
// }

// $action = isset($_GET['action']) ? $_GET['action'] : 'index';

// if (method_exists($controller, $action)) {
//     $controller->$action();
// } else {
//     $controller->error404();
// };


// $log = new Logger('test');


// registerController(InterfaceController::class);



// $interface = new Gesform($conn);
// $file = new File($conn, 'gesform');

// $file = new File($conn, 'gesform');
// $interfaceFiles = $file->getInterfaceFile();

// $interface->getInterfaceFiles(InterfacesFiles::GESFORM);
// $file->existFile('Gesform');

// Tester l'existances des fichiers
// utilsation de list() pour répartir les données


/* Agents */

// $pattern = '/^[\w]{0,8};[\w\.]{0,4};[\w\s-]{0,80};[\w\s-]{0,80};[\w\séèàëï-]{0,80};[A-Z]{0,1};[0-9\/]{0,10};[\w]{0,3};[\w\s]{0,25};[\w]{0,1};[\w]{0,2};[\w\s]{0,23};[\w\s\-\.éèàëï\'\/,]{0,80};[\w\s\-\.\'\/]{0,80};[\w]{0,4};[0-9\/]{0,10};[\w]{0,5};[0-9\/]{0,10};[\w]{0,4};[0-9\/]{0,10};[0-9\/]{0,10};[\w]{0,2};[0-9\/]{0,10};[\w]{0,6};[0-9\/]{0,10};[0-9\/]{0,10};[\w]{0,3};[0-9\/]{0,10};[0-9\/]{0,10};[\w]{0,4};[\w]{0,6};[\w\s\.-]{0,120};[\w\s]{0,80};[\w]{0,5};[\w\s]{0,80};[\w\s]{0,80};[\w\s]{0,80};[\w]{0,6};[\w0-9\/]{0,10};[\w@\.\-0-9]{0,50};[\w]{0,8};[\w]{0,8};[\w]{0,8};[\w]{0,8};[\w]{0,20};[\w\s]{0,11};[\w]{0,34};[\w]{0,11};/';

// $handle = fopen('..\FichiersInterfaces\Gesform\Agent.csv', 'r');

// $i = 0;
// while (($data = fgets($handle)) !== FALSE) {
//     $i++;
//     $res = preg_match($pattern, $data);
//     !$res ? dump($i . ' : ' . $res) : '';
// }
// fclose($handle);

// /* Grades */

// $pattern = '/^[\w]{4};[\w,\s\.,-éèïë()\'&]{80};[\w\s\.,-éèïë()\'&]{25};[\w\s]{13};[\w\s]{13}/';

// $handle = fopen('..\FichiersInterfaces\Gesform\Grade.csv', 'r');

// $i = 0;
// while (($data = fgets($handle)) !== false) {
//     $i++;
//     $res = preg_match($pattern, $data);
//     !$res ? dump($i . ' : ' . $res) : '';
// }
// fclose($handle);

// /* Métier */

// $strMetier = ';;';

// $patternMetier = '/^([\w]{2});([\w, ]{80})/';

// preg_match($patternMetier, $strMetier, $output_array);

// echo '<pre>'.print_r($output_array, 1).'</pre>';

// /* Statut */

// $strStatut = '3A;Apprenti                                              ;';

// $patternStatut = '/^([\w]{2});([\w, ]{80})/';

// preg_match($patternStatut, $strStatut, $output_array);

// echo '<pre>'.print_r($output_array, 1).'</pre>';

// /* Structure */

// $strStruct = 'POLE;1;POLE URGENCES;;';

// $patternStruct = '/^([\w]{4});([\w, ]{0,10});([\w, ]{0,80});([\w, ]{0,8})/';

// preg_match($patternStruct, $strStruct, $output_array);

// echo '<pre>'.print_r($output_array, 1).'</pre>';

// /* Diplomes */

// $strDiplome = '42    ;B T S                    ;;';

// $patternDiplome = '/^([\w ]{0,6});([\w, ]{0,25});([\w, ]{0,2})/';

// preg_match($patternDiplome, $strDiplome, $output_array);

// echo '<pre>'.print_r($output_array, 1).'</pre>';

// /* Position */

// $strPosition = 'UTD ;Maintien 1/2 traitement                                ;';

// $patternPosition = '/^([\w ]{0,4});([\w, ]{0,80})/';

// preg_match($patternPosition, $strPosition, $output_array);

// echo '<pre>'.print_r($output_array, 1).'</pre>';

// /* Emploi */

// $strPosition = 'UTD ;Maintien 1/2 traitement                             ;';

// $patternPosition = '/^([\w ]{0,4});([\w, \/]{0,80})/';

// preg_match($patternPosition, $strPosition, $output_array);

// echo '<pre>'.print_r($output_array, 1).'</pre>';

// /* Ref Structure */

// $strRefStrucutre = ';;;';

// $patternRefStrucutre = '/^([\w ]{0,4});([\w, ]{0,80})/';

// preg_match($patternRefStrucutre, $strRefStrucutre, $output_array);

// echo '<pre>'.print_r($output_array, 1).'</pre>';


















    // /**
    //  * Retourne tous les fichiers d'une interface.
    //  */
    // public function getInterfaceFiles(): Iinterface
    // {
    // $this->files = App::getModel('file');
    // return $this->files->getInterfaceFiles($this);
    // }

    // /**
    //  * Test l’existence des fichiers d'une interface
    //  *
    //  * @return void
    //  */
    // public function existFile(Iinterface $interface): void
    // {
    //   foreach ($interface->getInterfaceFiles($interface->getId()) as $file) {
    //         $res = file_exists(
    //             '../' . $_ENV['PATH_INTERFACE_FILE'] . '/'
    //                 . $this->getName() . '/' . $file . '.csv'
    //         );
    //         $logger = new Logger('log');
    //         if (!$res) {
    //             $logger->log('warning', $file . ' n\'a pas été généré');
    //         }
    //     }
    // }